#!/bin/bash
#set -x 
 
# Shows you the largest objects in your repo's pack file.
# Written for osx.
#
# @see http://stubbisms.wordpress.com/2009/07/10/git-script-to-show-largest-pack-objects-and-trim-your-waist-line/
# @author Antony Stubbs
# @modified by AEverdeen
 
# set the internal field spereator to line break, so that we can iterate easily over the verify-pack output


# The -p option makes the output so you can pipe it to the "clean-repo" script
# The -f option makes the output fancy, so it looks nice

while getopts ":pf" flag; do
  case $flag in
    p)
      printOpt="p"
      ;;
    f)
      printOpt="f"
      ;;
    *)
      echo "Usage: show-large-files -fp";
      exit;
      ;;
  esac
done

shift $(( OPTIND - 1 ));


IFS=$'\n';
 
# list all objects including their size, sort by size, take top 10
objects=`git verify-pack -v .git/objects/pack/pack-*.idx | grep -v chain | sort -k3nr | head`
 
echo "All sizes are in kB's. The pack column is the size of the object, compressed, inside the pack file."
 
output="size,pack,SHA,location"
for y in $objects
do
    # extract the size in bytes
    size=$((`echo $y | cut -f 5 -d ' '`/1024))
    # extract the compressed size in bytes
    compressedSize=$((`echo $y | cut -f 6 -d ' '`/1024))
    # extract the SHA
    sha=`echo $y | cut -f 1 -d ' '`
    # find the objects location in the repository tree
    other=`git rev-list --all --objects | grep $sha`
    #lineBreak=`echo -e "\n"`
    if [[ $printOpt =~ f ]]
    then
      output="${output}\n${size},${compressedSize},${other}"
    else
      output="${output} ${other}"
    fi
done
 
if [[ $printOpt =~ f ]]
then
  echo -e $output | column -t -s ', '
elif [[ $printOpt =~ p ]]
then
  echo $output | sed -e 's/size,pack,SHA,location//' | perl -npe "s# [^/|^.]\w+ # #g"
else
	echo
fi
